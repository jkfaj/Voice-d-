import subprocess
import json
import requests
from datetime import datetime
import os
import glob 
import base64
import hashlib
import hmac
import requests
import time
import uuid
from urllib import parse
import pandas as pd
import http.client
import json
from pydub import AudioSegment
from pydub.silence import split_on_silence
import threading
import you_get
import numpy as np
import subprocess
import zipfile
import shutil
import multiprocessing
import requests
import re
import json
from datetime import datetime
from lxml import etree
from concurrent.futures import ThreadPoolExecutor

'''多人多链接
   将压缩包移动到指定文件夹，如果之前文件夹有重名，处理方式
   b站如果是一个列表应该怎么下载，或者备注
   多参数问题
'''
'''
全局变量声明
'''
default_silence=630
default_thresh=-30

#改后缀的地方
hzcontent='（素材分享群：123593137，获取更多素材）.mp3'
       

rootpath='C:\\Users\\Administrator\\Desktop\\test2\\'
to_split_path=rootpath+'to_split_audio\\'
#dataurl=pd.read_csv(txtpath,header=None,sep='\n')
       
#if not os.path.exists(to_split_path):os.mkdir(to_split_path)
chunkspath=rootpath+'chunks\\'
wavpath=rootpath+'转wav\\'
logpath=rootpath+'日志\\'
txtpath='C:\\Users\\Administrator\\Desktop\\下载链接.txt'
dataurl=pd.read_csv(txtpath,header=None,sep='\n')
       
data_total=pd.DataFrame(data=None,columns=['编号','语音内容'])

ziptofile='E:\\test2\\新版语音包纯净版本\\'
ziptofile_hz='E:\\test2\\新版语音包带后缀版本\\'


#删除之前留下的文件
if  os.path.exists(chunkspath):
    shutil.rmtree(chunkspath)
if not os.path.exists(chunkspath):os.mkdir(chunkspath)

if  os.path.exists(to_split_path):
    shutil.rmtree(to_split_path)
if not os.path.exists(to_split_path):os.mkdir(to_split_path)

if os.path.exists(wavpath):
    shutil.rmtree(wavpath)
if not os.path.exists(wavpath):os.mkdir(wavpath)
    

def single():

    datam=dataurl
    namelist=[]
    urllist=[]
    silencelist=[]
    threshlist=[]
    for i in range(0,len(datam),1):
        if datam.loc[i,0][0:4]!='http':
            name=datam.loc[i,0].split()
            print(name)
            namelist.append(name[0])
            urllist.append(i)
            if len(name)>1:
                silencelist.append(int(name[1]))
                threshlist.append(int(name[2]))
            else:
                silencelist.append(default_silence)
                threshlist.append(default_thresh)
    return namelist,urllist,silencelist,threshlist
    
    



def dataframe_trans(namelist,urllist,dataurl):
#构建新的dataframe  格式的转换
    data_new_url=pd.DataFrame(data=None,columns=['人物名字','url链接'])
    for i in range(0,len(namelist),1):
         if i==(len(namelist)-1):
             data_url=dataurl[urllist[i]+1:]
             data_url.rename(columns={0:'url链接'},inplace=True)
             
             data_url.loc[:,'人物名字']=namelist[i]
             data_new_url=pd.concat([data_new_url,data_url])
             
         else:
             
             data_url=dataurl[urllist[i]+1:urllist[i+1]]
             data_url.rename(columns={0:'url链接'},inplace=True)
             
             data_url.loc[:,'人物名字']=namelist[i]
             data_new_url=pd.concat([data_new_url,data_url])


    return data_new_url


def file_make(namelist):
#创建文件夹 chunks  to_split_audio 转wav
    if len(namelist)>0:
        for i in namelist:
            to_split_file=to_split_path+i+'\\'   
            chunks_file=chunkspath+i+'\\'
            pcm_file=wavpath+i+'\\'
            
            if not os.path.exists(to_split_file):os.mkdir(to_split_file)
            #if not os.path.exists(chunks_file):os.mkdir(chunks_file)
           # if not os.path.exists(pcm_file):os.mkdir(pcm_file)

def data_new_url():


    if  os.path.exists(chunkspath):
        shutil.rmtree(chunkspath)
    if not os.path.exists(chunkspath):os.mkdir(chunkspath)

    if  os.path.exists(to_split_path):
        shutil.rmtree(to_split_path)
    if not os.path.exists(to_split_path):os.mkdir(to_split_path)

    if os.path.exists(wavpath):
        shutil.rmtree(wavpath)
    if not os.path.exists(wavpath):os.mkdir(wavpath)
    
    dataurl=pd.read_csv(txtpath,header=None,sep='\n')
  
       # remove_file(to_split_path,type='all')
    namelist,urllist,silencelist,threshlist=single()
    data_new_url=dataframe_trans(namelist,urllist,dataurl)
    data_new_url=data_new_url.reset_index(drop=True)
    data_new_url.sort_values('人物名字',ascending=True,inplace=True)
    data_new_url['下载类型']=data_new_url['url链接'].map(lambda x:x.split(' ')[-1])
   
    data_new_url['url链接']=data_new_url['url链接'].map(lambda x:x.split(' ')[0])
    #data_new_url['下载类型']=data_new_url['url链接'].map(lambda x:x.split(' ')[-1])
   
   
    file_make(namelist)
    return data_new_url


def use_api(file):
    headers = {
        'Authorization': 'Bearer sk-your key',
    }

    files = {
        'file': open(file, 'rb'),
        'model': (None, 'whisper-1'),
        'response_format': (None, 'srt'),
    }

    response = requests.post('https://api.openai.com/v1/audio/transcriptions', headers=headers, files=files)
    return response

# extract video info
def extract_video_info(url):
    cmd = 'you-get --json ' + url
    # subprocess.run(cmd, shell=True)
    json_obj = json.loads(subprocess.check_output(cmd, shell=True))
    return json_obj

# use you-get to download video
def download_video(url, path, filename):
    cmd = 'you-get -o ' + path + ' -O '+ filename + ' ' + url
    subprocess.run(cmd, shell=True)

# use ffmpeg to convert video to mp3
def convert_video_to_mp3(video_path, mp3_path):
    cmd = 'ffmpeg -i ' + video_path + ' -vn -ar 44100 -ac 2 -ab 192k -f mp3 ' + mp3_path
    subprocess.run(cmd, shell=True)

def main():
    while True:
        url = input('Please input the url of the video: ')
        # 'https://www.youtube.com/watch?v=6ZfuNTqbHE8'
        # 'https://www.bilibili.com/video/BV1eY41167LT/'
        print('Extracting video info...\n')
        json_obj = extract_video_info(url)
        title = json_obj['title']
        stream = json_obj['streams']
        
        min_size = float('inf')
        # 用一个变量来保存最小值对应的键，初始值为空字符串
        min_key = ''

        # 遍历所有键值对，更新最小值和对应的键
        for key, value in stream.items():
            if value['size'] < min_size:
                min_size = value['size']
                min_key = key
        min_video = stream[min_key]
        container = min_video['container']
        # print(title)
        filename = title + '.' + container
        download_video(url, './', title)
        convert_video_to_mp3(filename, title + '.mp3')
        with open(title + '.srt', 'w') as f:
            response = use_api(title + '.mp3')
            f.write(response.text)

if __name__ == '__main__':
    main()
